<IonButton @onclick="@PresentAlertAsync">
    Click Me
</IonButton>

@code {

    [CascadingParameter(Name = nameof(Console))]
    public PlaygroundConsole? Console { get; init; }

    private async Task PresentAlertAsync()
    {
        await IonAlertController.PresentAsync(options =>
        {
            options.Header = "A Short Title Is Best";
            options.SubHeader = "A Sub Header Is Optional";
            options.Message = "A message should be a short, complete sentence.";
            options.Id = "my-awesome-alert";
            options.ButtonsBuilder = builder =>
                builder
                    .Add<AlertButton>(button =>
                    {
                        button.Text = "Accept";
                        button.Role = "accept";
                        button.Color = IonColor.Warning;
                        button.CssClass = "ion-color-warning";
                        button.Handler = args =>
                        {
                            Console?.Add($"{nameof(IonAlertController)}::{nameof(AlertButton)}(index: {args.Index}, role: {args.Button!.Role})");
                            return ValueTask.CompletedTask;
                        };
                    })
                    .Add<AlertButton>(button =>
                    {
                        button.Text = "Cancel";
                        button.Role = "cancel";
                        button.Handler = args =>
                        {
                            Console?.Add($"{nameof(IonAlertController)}::{nameof(AlertButton)}(index: {args.Index}, role: {args.Button!.Role})");
                            return ValueTask.CompletedTask;
                        };
                    });
            options.OnDidDismiss = args => Console?.Add($"{nameof(IonAlertController)}::{nameof(IonAlert.IonAlertDidDismiss)}(role: {args.Role})");
        });
    }

}