@page "/samples/action-sheet"
@using System.Text.Json
@inject IJSRuntime JsRuntime

<style>
    device-preview .content {
      display: flex;
    
      align-items: center;
      justify-content: center;
    
      height: 100%;
    }

</style>
<div class="ion-page" id="main-content">
    <IonContent Class="container">
        <h2>Inline Action Sheets (Recommended)</h2>
        @*<div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    
                </div>
            </div>
        </div>*@
        <div class="playground__container">
            <div class="playground__preview">
                <div class="container">
                    <DevicePreview Mode="@IonMode.MaterialDesign">
                        <InlineActionSheets/>
                    </DevicePreview>
                </div>
            </div>
        </div>
        
        
        <h2>Using <code>isOpen</code></h2>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="container">
                    <DevicePreview Mode="@IonMode.MaterialDesign">
                        <UsingIsOpen/>
                    </DevicePreview>
                </div>
            </div>
        </div>
        
        <h2>Controller Action Sheets</h2>
        <p>The <code>actionSheetController</code> can be used in situations where more control is needed over when the Action Sheet is presented and dismissed.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="container">
                    <DevicePreview Mode="@IonMode.MaterialDesign">
                        <IonButton @onclick="@(async () => { await IonActionSheetController.PresentAsync(header: "Actions", ButtonsBuilder); })">
                            Open
                        </IonButton>
                    </DevicePreview>
                </div>
            </div>
        </div>
        
        <h2>Collecting Role Information on Dismiss</h2>
        <p>When the <code>didDismiss</code> event is fired, the <code>data</code> and <code>role</code> fields of the event detail can be used to gather information about how the Action Sheet was dismissed.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="container">
                    <DevicePreview Mode="@IonMode.MaterialDesign">
                        <IonButton id="open-action-sheet-role-info">Open</IonButton>
                        <IonActionSheet
                            TButtonData="ActionSheetButtonData"
                            Trigger="open-action-sheet-role-info"
                            Header="Example header"
                            SubHeader="Example subheader"
                            IonActionSheetDidDismiss="@(args => { Console.WriteLine(JsonSerializer.Serialize(new { data = args.Data, role = args.Role }, new JsonSerializerOptions(JsonSerializerDefaults.General) { WriteIndented = false })); })"
                            Buttons="@(() => { return new List<SimpleActionSheetButton>() {
                                         new() { Text = "Delete", Role = "destructive", Data = new ActionSheetButtonData { Action = "delete" } }, 
                                         new() { Text = "Share", Data = new ActionSheetButtonData { Action = "share" } }, 
                                         new() { Text = "Cancel", Role = "cancel", Data = new ActionSheetButtonData { Action = "cancel" } } }; })"></IonActionSheet>
                    </DevicePreview>
                    @*<div class="playground__console">
                        <div class="playground__console-header"><code>Console</code></div>
                        <div class="playground__console-body">
                            <div class="playground__console-item playground__console-item--placeholder">
                                <code>Console messages will appear here when logged from the example above.</code>
                            </div></div>
                    </div>*@
                    
                </div>
            </div>
        </div>
        
        <h2>Theming</h2>
        <h3>Styling</h3>
        <p>We recommend passing a custom class to <code>cssClass</code> in the <code>create</code> method and using that to add custom styles to the host and inner elements. This property can also accept multiple classes separated by spaces.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="container">
                    <DevicePreview Mode="@IonMode.MaterialDesign">
                        <style>
                            ion-action-sheet.my-custom-class .action-sheet-group {
                                background: #f58840;
                              }
                            
                              ion-action-sheet.my-custom-class .action-sheet-title {
                                color: #fff;
                              }
                            
                              ion-action-sheet.my-custom-class .action-sheet-cancel::after {
                                background: #e97223;
                              }
                            
                              ion-action-sheet.my-custom-class .action-sheet-button,
                              ion-action-sheet.my-custom-class .action-sheet-button.ion-focused {
                                color: #000000;
                              }
                            
                              @@media (any-hover: hover) {
                                ion-action-sheet.my-custom-class .action-sheet-button:hover {
                                  color: #000000;
                                }
                              }
                            
                              ion-action-sheet.my-custom-class ion-backdrop {
                                opacity: 0.6;
                              }
                        </style>
                        <IonButton id="open-action-sheet-styling">Open</IonButton>
                        <IonActionSheet
                            TButtonData="ActionSheetButtonData"
                            CssClass="my-custom-class"
                            Trigger="open-action-sheet-styling"
                            Header="Example header"
                            SubHeader="Example subheader"
                            Buttons="@(() => { return new List<SimpleActionSheetButton>() { new() { Text = "Delete", Role = "destructive", Data = new ActionSheetButtonData { Action = "delete" } }, new() { Text = "Share" }, new() { Text = "Cancel", Role = "cancel", Data = new ActionSheetButtonData { Action = "cancel" } } }; })"></IonActionSheet>
                    </DevicePreview>
                </div>
            </div>
        </div>
        
        <h3>CSS Custom Properties</h3>
        <p>Any of the defined CSS Custom Properties can be used to style the Action Sheet without needing to target individual elements.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="container">
                    <DevicePreview Mode="@IonMode.MaterialDesign">
                        <style>
                            ion-action-sheet.my-custom-class {
                                --background: #f58840;
                                --backdrop-opacity: 0.6;
                                --button-background-selected: #e97223;
                                --button-color: #000000;
                                --color: #fff;
                                /* role: "destructive" button iOS styling override */
                                --ion-color-danger: #000000;
                              }
                        </style>
                        <IonButton id="open-action-sheet-css-custom-properties">Open</IonButton>
                        <IonActionSheet
                            TButtonData="ActionSheetButtonData"
                            CssClass="my-custom-class"
                            Trigger="open-action-sheet-css-custom-properties"
                            Header="Example header"
                            SubHeader="Example subheader"
                            Buttons="@(() => { return new List<SimpleActionSheetButton>() { new() { Text = "Delete", Role = "destructive", Data = new ActionSheetButtonData { Action = "delete" } }, new() { Text = "Share" }, new() { Text = "Cancel", Role = "cancel", Data = new ActionSheetButtonData { Action = "cancel" } } }; })"></IonActionSheet>
                    </DevicePreview> 
                </div>
            </div>
        </div>
        

    </IonContent>
</div>

@code
{
    private IEnumerable<SimpleActionSheetButton> ButtonsBuilder()
    {
        return new List<SimpleActionSheetButton>()
        {
            new() { Text = "Delete", Role = "destructive", Data = new ActionSheetButtonData { Action = "delete" }, Handler = ButtonHandler }, 
            new() { Text = "Share", Data = new ActionSheetButtonData { Action = "share" }, Handler = ButtonHandler }, 
            new() { Text = "Cancel", Role = "cancel", Data = new ActionSheetButtonData { Action = "cancel" }, Handler = ButtonHandler }
        };
    }
    
    private async ValueTask ButtonHandler(ActionSheetButton<ActionSheetButtonData>? button, int? index)
    {
        await IonToastController.PresentAsync(
            message: $"Button Index: {index}; Role: {button?.Role}; Text: {button?.Text}; Action: {button?.Data?.Action};", 
            position: "bottom", 
            duration: 3000, 
            icon: "logo-ionic");
    }
}
