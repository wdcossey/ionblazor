@page "/samples/searchbar"

<div class="ion-page" id="main-content">
    <IonContent Class="container">
        <h2>Basic Usage</h2>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <IonSearchbar></IonSearchbar>
                    <IonSearchbar Placeholder="Custom Placeholder"></IonSearchbar>
                    <IonSearchbar Disabled="true" Placeholder="Disabled"></IonSearchbar>
                    <IonSearchbar Value="Value"></IonSearchbar>
                    <IonSearchbar Animated="true" Placeholder="Animated"></IonSearchbar>
                </div>
            </div>
        </div>
        
        <h2>Search Icon</h2>
        <p>A search icon is displayed to the left of the input field in a searchbar. It can be customized to any <a href="https://ionic.io/ionicons/" target="_blank" rel="noopener noreferrer">Ionicon</a>.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <IonSearchbar></IonSearchbar>
                    <IonSearchbar SearchIcon="search-circle" Placeholder="Custom Search Icon"></IonSearchbar>
                </div>
            </div>
        </div>
        
        <h2>Clear Button</h2>
        <p>A clear button is displayed when a searchbar has a value or upon entering input in the searchbar's text field. Clicking on the clear button will erase the text field and the input will remain focused. By default, the clear button is set to show when focusing the searchbar, but it can be set to always show or never show. The icon inside of the clear button can also be customized to any <a href="https://ionic.io/ionicons/" target="_blank" rel="noopener noreferrer">Ionicon</a>.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <IonSearchbar ShowClearButton="ButtonBehavior.Focus" Value="Show on Focus"></IonSearchbar>
                    <IonSearchbar ShowClearButton="ButtonBehavior.Always" Value="Always Show"></IonSearchbar>
                    <IonSearchbar ShowClearButton="ButtonBehavior.Never" Value="Never Show"></IonSearchbar>
                    <IonSearchbar ShowClearButton="ButtonBehavior.Always" ClearIcon="trash-bin" Value="Custom Clear Icon"></IonSearchbar>
                </div>
            </div>
        </div>
        
        <h2>Cancel Button</h2>
        <p>A cancel button can be enabled which will clear the input and lose the focus upon click. By default, cancel buttons are set to never show, but they can be set to always show or only show when focusing the searchbar. The cancel button is displayed as text in <code>ios</code> mode, and as an icon in <code>md</code> mode. Both the text and icon can be customized using different properties, with the icon accepting any <a href="https://ionic.io/ionicons/" target="_blank" rel="noopener noreferrer">Ionicon</a>.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <IonSearchbar ShowCancelButton="ButtonBehavior.Focus" Placeholder="Show on Focus"></IonSearchbar>
                    <IonSearchbar ShowCancelButton="ButtonBehavior.Always" Placeholder="Always Show"></IonSearchbar>
                    <IonSearchbar ShowCancelButton="ButtonBehavior.Never" Placeholder="Never Show"></IonSearchbar>
                    <IonSearchbar ShowCancelButton="ButtonBehavior.Always" CancelButtonText="Custom Cancel" CancelButtonIcon="trash" Placeholder="Custom Cancel Button"></IonSearchbar>
                </div>
            </div>
        </div>
        
        <h2>Searchbars in Toolbars</h2>
        <p>Searchbars are styled to look native when placed inside of a toolbar. In iOS, searchbars should be placed in their own toolbar, under a toolbar that contains the page title. In Material Design, searchbars are either persistently displayed in their own toolbar, or expand over a toolbar containing the page title.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <DevicePreview Mode="@IonMode.MaterialDesign">
                        <IonHeader>
                          <IonToolbar>
                            <IonTitle>Toolbar</IonTitle>
                          </IonToolbar>
                          <IonToolbar>
                            <IonSearchbar></IonSearchbar>
                          </IonToolbar>
                        </IonHeader>
                    </DevicePreview>
                </div>
            </div>
        </div>
        
        <h2>Debounce</h2>
        <p>A debounce can be set on the searchbar in order to delay triggering the <code>ionInput</code> event. This is useful when querying data, as it can be used to wait to make a request instead of requesting the data each time a character is entered in the input.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <Debounce/>
                </div>
            </div>
        </div>
        
        <h2>Theming</h2>
        <h3>Colors</h3>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <IonSearchbar Placeholder="Default"></IonSearchbar>
                    <IonSearchbar Color="primary" Placeholder="Primary"></IonSearchbar>
                    <IonSearchbar Color="secondary" Placeholder="Secondary"></IonSearchbar>
                    <IonSearchbar Color="tertiary" Placeholder="Tertiary"></IonSearchbar>
                    <IonSearchbar Color="success" Placeholder="Success"></IonSearchbar>
                    <IonSearchbar Color="warning" Placeholder="Warning"></IonSearchbar>
                    <IonSearchbar Color="danger" Placeholder="Danger"></IonSearchbar>
                    <IonSearchbar Color="light" Placeholder="Light"></IonSearchbar>
                    <IonSearchbar Color="medium" Placeholder="Medium"></IonSearchbar>
                    <IonSearchbar Color="dark" Placeholder="Dark"></IonSearchbar>
                </div>
            </div>
        </div>
        
        <h3>CSS Custom Properties</h3>
        <p>Searchbar uses scoped encapsulation, which means it will automatically scope its CSS by appending each of the styles with an additional class at runtime. Overriding scoped selectors in CSS requires a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity" target="_blank" rel="noopener noreferrer">higher specificity</a> selector. Targeting the <code>ion-searchbar</code> for customization will not work, therefore we recommend adding a class and customizing it that way.</p>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <CustomIonSearchbar/>
                </div>
            </div>
        </div>
        
        <h2>Events</h2>
        
        <h3>setFocus</h3>
        <div class="playground__container">
            <div class="playground__preview">
                <div class="playground__frame">
                    <IonSearchbar @ref="_ionSearchbarSetFocusRef" IonBlur="@(() => focusMessage = "Lost focus")" IonFocus="@(() => focusMessage = "Has focus")"></IonSearchbar>
                    <p>
                        <code>@focusMessage</code>
                    </p>
                    <IonButton @onclick="@SetFocusAsync">Set Focus</IonButton>
                </div>
            </div>
        </div>
        

    </IonContent>
</div>