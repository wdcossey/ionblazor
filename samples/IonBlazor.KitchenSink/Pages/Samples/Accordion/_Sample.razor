@page "/samples/accordion"

<PlaygroundContainer>
    <Header>
        <h2>Basic Usage</h2>
    </Header>
    <ChildContent>
        <BasicUsage/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h2>Toggle Accordions</h2>
        <p>Which accordion is open is controlled by setting the <code>value</code> property on <code>ion-accordion-group</code>. Setting this property allows developers to programmatically expand or collapse certain accordions.</p>
    </Header>
    <ChildContent>
        <ToggleAccordions/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer EnableConsole="true">
    <Header>
        <h2>Listen for Accordion State Changes</h2>
        <p>Developers can listen for the <code>ionChange</code> event to be notified when accordions expand or collapse.</p>
    </Header>
    <ChildContent>
        <ListenForAccordionStateChanges/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h2>Multiple Accordions</h2>
        <p>Developers can allow multiple accordions to be open at once with the <code>multiple</code> property.</p>
    </Header>
    <ChildContent>
        <MultipleAccordions/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h2>Disabling Accordions</h2>
        <h3>Individual Accordion</h3>
        <p>Individual accordions can be disabled with the <code>disabled</code> property on <code>ion-accordion</code>.</p>
    </Header>
    <ChildContent>
        <DisablingIndividualAccordion/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h3>Accordion Group</h3>
        <p>The accordion group can be disabled with the <code>disabled</code> property on <code>ion-accordion-group</code>.</p>
    </Header>
    <ChildContent>
        <DisablingAccordionGroup/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h2>Readonly Accordions</h2>
        <h3>Individual Accordion</h3>
        <p>Individual accordions can be disabled with the <code>readonly</code> property on <code>ion-accordion</code>.</p>
    </Header>
    <ChildContent>
        <ReadonlyIndividualAccordion/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h3>Accordion Group</h3>
        <p>The accordion group can be disabled with the <code>readonly</code> property on <code>ion-accordion-group</code>.</p>
    </Header>
    <ChildContent>
        <ReadonlyAccordionGroup/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h2>Customization</h2>
        <h3>Expansion Styles</h3>
        <p>There are two built in expansion styles: <code>compact</code> and <code>inset</code>. This expansion style is set via the <code>expand</code> property on <code>ion-accordion-group</code>.</p>
        <p>When <code>expand="inset"</code>, the accordion group is given a border radius. On <code>md</code> mode, the entire accordion will shift down when it is opened.</p>
    </Header>
    <ChildContent>
        <CustomizationExpansionStyles/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h3>Advanced Expansion Styles</h3>
        <p>You can customize the expansion behavior by styling based on the accordion's state. There are four state classes applied to <code>ion-accordion</code>. Styling using these classes can allow you to create advanced state transitions:</p>
    </Header>
    <ChildContent>
        <CustomizationAdvancedExpansionStyles/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h3>Icons</h3>
        <p>When using an <code>ion-item</code> in the <code>header</code> slot, we automatically add an <code>ion-icon</code>. The type of icon used can be controlled by the <code>toggleIcon</code> property, and the slot it is added to can be controlled with the <code>toggleIconSlot</code> property.</p>
        <p>If you would like to manage the icon yourself or use an icon that is not an <code>ion-icon</code>, you can add the <code>ion-accordion-toggle-icon</code> class to the icon element.</p>
        <p>Regardless of which option you choose, the icon will automatically be rotated when you expand or collapse the accordion.</p>
    </Header>
    <ChildContent>
        <CustomizationIcons/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h3>Theming</h3>
        <p>Since <code>ion-accordion</code> acts as a shell around the header and content elements, you can easily theme the accordion however you would like. You can theme the header by targeting the slotted <code>ion-item</code>. Since you are using <code>ion-item</code>, you also have access to all of the <a href="https://ionicframework.com/docs/api/item#css-custom-properties">ion-item CSS Variables</a> and <a href="/docs/api/item#css-shadow-parts">ion-item Shadow Parts</a>. Theming the content is also easily achieved by targeting the element that is in the <code>content</code> slot.</p>
    </Header>
    <ChildContent>
        <CustomizationTheming/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h2>Accessibility</h2>
        <h3>Animations</h3>
        <p>By default, animations are enabled when expanding or collapsing an accordion item. Animations will be automatically disabled when the <code>prefers-reduced-motion</code> media query is supported and set to <code>reduce</code>. For browsers that do not support this, animations can be disabled by setting the <code>animated</code> config in your Ionic Framework app.</p>
    </Header>
    <ChildContent>
        <AccessibilityAnimations/>
    </ChildContent>
</PlaygroundContainer>