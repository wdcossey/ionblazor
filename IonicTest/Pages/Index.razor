@page "/"
@using System.Text.Json.Nodes

@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

<ion-menu content-id="main-content">
    <ion-header>
        <ion-toolbar>
            <ion-title>Menu Content</ion-title>
        </ion-toolbar>
    </ion-header>
    <IonContent Class="ion-padding">
        <ion-list>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/button"))">ion-button</IonButton>
                @*<IonLabel>Button</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/icon"))">ion-icon</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/chip"))">ion-chip</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/avatar"))">ion-avatar</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/image"))">ion-image</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/thumbnail"))">ion-thumbnail</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/note"))">ion-note</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/accordion"))">ion-accordion</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/badge"))">ion-badge</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/content"))">ion-content</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/samples/searchbar"))">ion-searchbar</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/samples/text"))">ion-text</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/samples/toggle"))">ion-toggle</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/samples/checkbox"))">ion-checkbox</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/samples/ripple-effect"))">ion-ripple-effect</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/samples/fab"))">ion-fab</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
            <ion-item>
                <IonButton Expand="ButtonExpand.Full" OnClick="@(() => NavigationManager.NavigateTo("/sample/spinner"))">ion-spinner</IonButton>
                @*<IonLabel>Mega Man X</IonLabel>*@
            </ion-item>
          <ion-item>
            <IonLabel>The Legend of Zelda</IonLabel>
          </ion-item>
          <ion-item>
            <IonLabel>Pac-Man</IonLabel>
          </ion-item>
          <ion-item>
            <IonLabel>Super Mario World</IonLabel>
          </ion-item>
        </ion-list>
    </IonContent>
</ion-menu>

<div class="ion-page" id="main-content">
    <ion-header>
        <ion-toolbar>
            <ion-buttons slot="start">
                <ion-menu-button></ion-menu-button>
            </ion-buttons>
            <ion-title>Menu</ion-title>
        </ion-toolbar>
    </ion-header>
    
    <IonContent Class="container">
        
        <IonFab Slot="fixed" Vertical="@IonVerticalAlignment.Top" Horizontal="@IonHorizontalAlignment.Start">
            <IonFabButton>
              <IonIcon Name="chevron-forward-circle"></IonIcon>
            </IonFabButton>
            <IonFabList Side="end">
              <IonFabButton>
                <IonIcon Name="document"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="color-palette"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="globe"></IonIcon>
              </IonFabButton>
            </IonFabList>
          </IonFab>
        
          <IonFab Slot="fixed" Vertical="@IonVerticalAlignment.Top" Horizontal="@IonHorizontalAlignment.End" Edge="true">
            <IonFabButton>
              <IonIcon Name="chevron-down-circle"></IonIcon>
            </IonFabButton>
            <IonFabList Side="bottom">
              <IonFabButton>
                <IonIcon Name="document"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="color-palette"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="globe"></IonIcon>
              </IonFabButton>
            </IonFabList>
          </IonFab>
              
          <IonFab Slot="fixed" Vertical="@IonVerticalAlignment.Bottom" Horizontal="@IonHorizontalAlignment.End">
            <IonFabButton>
              <IonIcon Name="chevron-up-circle"></IonIcon>
            </IonFabButton>
            <IonFabList Side="top">
              <IonFabButton>
                <IonIcon Name="document"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="color-palette"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="globe"></IonIcon>
              </IonFabButton>
            </IonFabList>
          </IonFab>
        
        <ion-list inset="true">
            <ion-item button="true" detail="false" id="select-fruits">
                <IonLabel>Favorite Fruits</IonLabel>
                <div slot="end" id="#selected-fruits">@($"{workingSelectedFruits.Count} Items")</div>
            </ion-item>
            <IonButton Expand="ButtonExpand.Block" Color="@IonColor.Danger" OnClick="@(() => presentToast("bottom", "Hello World!"))">Present Toast At the Bottom</IonButton>

        </ion-list>

        <ion-toast isOpen=true message="Hello World!" duration=1500></ion-toast>

        <ion-list>
            <ion-item-sliding>
                <ion-item>
                    <IonLabel>Sliding Item with End Options</IonLabel>
                </ion-item>

                <ion-item-options>
                    <ion-item-option>Favorite</ion-item-option>
                    <ion-item-option color="danger">Delete</ion-item-option>
                </ion-item-options>
            </ion-item-sliding>

            <ion-item-sliding>
                <ion-item-options side="start">
                    <ion-item-option color="success">Archive</ion-item-option>
                </ion-item-options>

                <ion-item>
                    <IonLabel>Sliding Item with Start Options</IonLabel>
                </ion-item>
            </ion-item-sliding>

            <ion-item-sliding>
                <ion-item-options side="start">
                    <ion-item-option color="success">Archive</ion-item-option>
                </ion-item-options>

                <ion-item>
                    <IonLabel>Sliding Item with Options on Both Sides</IonLabel>
                </ion-item>

                <ion-item-options side="end">
                    <ion-item-option>Favorite</ion-item-option>
                    <ion-item-option color="danger">Delete</ion-item-option>
                </ion-item-options>
            </ion-item-sliding>

            <ion-item-sliding>
                <ion-item-options side="start">
                    <ion-item-option color="success">Archive</ion-item-option>
                </ion-item-options>

                <ion-item>
                    <FlowObjectPanel DataSource="@(new { One = "FlowObjectPanel", Two = "Sample" })" Options="@(new ObjectFieldOptionsCollection { new ObjectFieldOptions() { Row = 0, Column = 0, Width = "16px", Height = "16px", Padding = "4px", BackgroundColor = "#ff0000" }, new ObjectFieldOptions() { Row = 0, Column = 1, Template = "{{One}}" }, new ObjectFieldOptions() { Row = 1, Column = 1, Template = "{{Two}}" } })"></FlowObjectPanel>
                </ion-item>

                <ion-item-options side="end">
                    <ion-item-option>Favorite</ion-item-option>
                    <ion-item-option color="danger">Delete</ion-item-option>
                </ion-item-options>
            </ion-item-sliding>
        </ion-list>

        <ion-datetime-button datetime="datetime"></ion-datetime-button>

        <ion-modal>
            <ion-datetime id="datetime"></ion-datetime>
        </ion-modal>

        <ion-button id="open-modal" expand="block">Open</ion-button>
    </IonContent>

    <ion-modal trigger="select-fruits" id="selected-fruits" @ref="modal">
        <ion-header>
            <ion-toolbar>
                <ion-buttons slot="start">
                    <IonButton OnClick="@cancelChanges">Cancel</IonButton>
                </ion-buttons>
                <ion-title>Favorite Fruits</ion-title>
                <ion-buttons slot="end">
                    <IonButton OnClick="@confirmChanges">Done</IonButton>
                </ion-buttons>
            </ion-toolbar>
            <ion-toolbar>
                <IonSearchBar Debounce="1000" Value="@searchbarValue" IonInput="@(SearchbarCallback)"></IonSearchBar>
            </ion-toolbar>
        </ion-header>
        <IonContent Color="@IonColor.Light" Class="ion-padding">
            <ion-list id="modal-list" inset="true">
                @foreach (var item in renderList)
                {
                    var @checked = workingSelectedFruits.Contains(item.value);
                    <ion-item>
                        <IonLabel>@item.text</IonLabel>
                        <IonCheckBox Slot="end" Value="@item.value" Checked="@(@checked)"></IonCheckBox>
                    </ion-item>
                }
            </ion-list>
        </IonContent>
    </ion-modal>

    <ion-modal trigger="open-modal" id="modal-test">
        <ion-header>
            <ion-toolbar>
                <ion-buttons slot="start">
                    <ion-button onclick="cancel()">Cancel</ion-button>
                </ion-buttons>
                <ion-title>Welcome</ion-title>
                <ion-buttons slot="end">
                    <ion-button onclick="@confirm" strong="true">Confirm</ion-button>
                </ion-buttons>
            </ion-toolbar>
        </ion-header>
        <IonContent Class="ion-padding">
            <ion-item>
                <IonLabel Position="@IonPosition.Stacked">Enter your name</IonLabel>
                <ion-input id="input-name" type="text" placeholder="Your name" value="@inputNameValue" @ref="inputNameRef"></ion-input>
            </ion-item>
        </IonContent>
    </ion-modal>
    
    <ion-button id="open-action-sheet">Open</ion-button>
    <IonActionSheet
        TButtonData="ActionSheetButtonData"
        Trigger="open-action-sheet" 
        Header="Actions" 
        OnDidDismiss="@DidDismiss"
        OnButtonHandler="@OnButtonHandler"
        Buttons="@(() => { return new List<ActionSheetButton<ActionSheetButtonData>>() { 
                                 new () { Text = "Delete", Role = "destructive", Icon = "trash-outline", Data = new ActionSheetButtonData { Action = "delete" } }, 
                                 new () { Text = "Share", Icon = "share" }, 
                                 new () { Text = "Cancel", Role = "cancel", Data = new ActionSheetButtonData { Action = "cancel" } } }; })"></IonActionSheet>
    
    @*<ion-icon name="chevron-back"></ion-icon>*@
    @*    {
      text: 'Delete',
      role: 'destructive',
      data: {
        action: 'delete'
      }
    },
    {
      text: 'Share',
      data: {
        action: 'share'
      }
    },
    {
      text: 'Cancel',
      role: 'cancel',
      data: {
        action: 'cancel'
      }
    }*@

      
</div>

@code {

    ElementReference list;      //document.querySelector('ion-list#modal-list');
    ElementReference modal;     //document.querySelector('ion-modal');
    ElementReference inputNameRef; //ion-input#input-name
    
    //IJSObjectReference selectedFruitsText;// = document.querySelector('#selected-fruits');
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> ModalReference;
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> ModalDidDismissReference;
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> InputNameObjectReference;
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> InputNameInputObjectReference;
    
    private List<dynamic> cards = new List<dynamic>();
    private string Title;
    private string Content;
    private string? searchbarValue;
    private string? inputNameValue;

    private (string text, string value)[] fruits = new (string text, string value)[]
    { 
        (text: "Apple", value: "apple"),
        (text: "Apricot", value: "apricot") ,
        (text: "Banana", value: "banana") ,
        (text: "Blackberry", value: "blackberry") ,
        (text: "Blueberry", value: "blueberry") ,
        (text: "Cherry", value: "cherry") ,
        (text: "Cranberry", value: "cranberry") ,
        (text: "Grape", value: "grape") ,
        (text: "Grapefruit", value: "grapefruit") ,
        (text: "Guava", value: "guava") ,
        (text: "Jackfruit", value: "jackfruit") ,
        (text: "Lime", value: "lime") ,
        (text: "Mango", value: "mango") ,
        (text: "Nectarine", value: "nectarine") ,
        (text: "Orange", value: "orange") ,
        (text: "Papaya", value: "papaya") ,
        (text: "Passionfruit", value: "passionfruit") ,
        (text: "Peach", value: "peach") ,
        (text: "Pear", value: "pear") ,
        (text: "Plantain", value: "plantain") ,
        (text: "Plum", value: "plum") ,
        (text: "Pineapple", value: "pineapple") ,
        (text: "Pomegranate", value: "pomegranate") ,
        (text: "Raspberry", value: "raspberry") ,
        (text: "Strawberry", value: "strawberry") 
    };

    private List<string> selectedFruits = new List<string>();
    private HashSet<string> workingSelectedFruits = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);

    private (string text, string value)[] renderList { get; set; }

    private (string text, string value)[] filterList(string? searchQuery)
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return fruits;

        var normalizedQuery = searchQuery.ToLowerInvariant();

        return fruits.Where(fruit => fruit.value.Contains(normalizedQuery)).ToArray();
    }

    protected override void OnInitialized()
    {
        renderList = filterList(null);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender)
            return;


    //modal = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal");
    //var searchbar = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-searchbar");

    //document.querySelector('ion-searchbar').addEventListener('ionInput', e => console.log(e.target.value));

    //await searchbar.InvokeVoidAsync("addCustomEventListener", "ionInput", EventCallback.Factory.Create<string>(this, val => { throw new InvalidOperationException(); }));

        ModalReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            //{"checked":true,"value":"apricot"}
            var tagName = args["tagName"]?.GetValue<string>();

            if (tagName?.Equals("ION-CHECKBOX", StringComparison.InvariantCultureIgnoreCase) is not true)
                return Task.CompletedTask;


            var detail = (@checked: args["detail"]?["checked"]?.GetValue<bool>(), @value: args["detail"]?["value"]?.GetValue<string>());

            if (detail.@checked is true)
            {
                workingSelectedFruits.Add(detail.value);
            }
            else
            {
                workingSelectedFruits.Remove(detail.value);
            }

            return Task.CompletedTask;
        }));

        InputNameObjectReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            inputNameValue = args?["detail"]?["value"]?.GetValue<string>();
            return Task.CompletedTask;
        }));


        InputNameInputObjectReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            inputNameValue = args?["detail"]?["value"]?.GetValue<string>();
            return Task.CompletedTask;
        }));

        ModalDidDismissReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            searchbarValue = null;
            StateHasChanged();
            return Task.CompletedTask;
        }));

        await jsRuntime.InvokeVoidAsync("addIonEventListener", "ionChange", modal, ModalReference);
        await jsRuntime.InvokeVoidAsync("addIonEventListener", "ionModalDidDismiss", modal, ModalDidDismissReference);

        await jsRuntime.InvokeVoidAsync("attachIonEventListener", "ionChange", inputNameRef, InputNameObjectReference);
        await jsRuntime.InvokeVoidAsync("attachIonEventListener", "ionInput", inputNameRef, InputNameInputObjectReference);
        
        //(ev) => {renderList(ev.target.value); }
        //selectedFruitsText = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "#selected-fruits");

    }

    public class CustomEventHelper<TArgs>
    {
        private readonly Func<TArgs, Task> _callback;

        public CustomEventHelper(Func<TArgs, Task> callback) => _callback = callback;

        [JSInvokable]
        public Task OnCallbackEvent(TArgs args) => _callback(args);
    }

    /**
   * Reset any working changes
   * and dismiss the modal.
   */
    private async void cancelChanges() {
        workingSelectedFruits = selectedFruits.ToHashSet();
        var modal = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal#selected-fruits");
        await modal.InvokeVoidAsync("dismiss", null, "cancel"); //modal.dismiss(undefined, 'cancel');
        StateHasChanged();
    }

    /**
   * Return the selected
   * fruits to the parent page.
   */
    private async void confirmChanges() {
        selectedFruits = workingSelectedFruits.ToList();
        var modal = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal#selected-fruits");
        await modal.InvokeVoidAsync("dismiss", selectedFruits); //modal.dismiss(selectedFruits)
        StateHasChanged();
    }
    
    private async void confirm() {
        var modal = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal#modal-test");
        //var input = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-input"); //const input = document.querySelector('ion-input');
        //var value = await input.InvokeAsync<string>("getProperty", "value");
        await modal.InvokeVoidAsync("dismiss",  inputNameValue, "confirm"); //modal.dismiss(input.value, 'confirm');
    }

    private async Task AddCard()
    {
        if (!string.IsNullOrEmpty(Title))
        {
            if (cards.Any(x => x.Title == Title))
            {
                @* If Title already exists, show a message *@
                await jsRuntime.InvokeVoidAsync("showIonAlert");
                return;
            }
            cards.Add(new { Title = Title, Content = Content });
            Title = string.Empty;
            Content = string.Empty;
        }
    }
}
@code {
    private async void presentToast(string position, string message) {
        await jsRuntime.InvokeVoidAsync("presentToast", position, message);
    }
    
    private void DidDismiss(ActionSheetDidDismissEventArgs<ActionSheetButtonData> args) {
        //presentToast("bottom", $"Role: {args.Role}; Data: {args.Data}");
    }
    
    private void OnButtonHandler(ActionSheetButtonHandlerEventArgs<ActionSheetButtonData> args) {
        presentToast("bottom", $"Button Index: {args.Index}; Role: {args.Button?.Role}; Text: {args.Button?.Text}; Action: {args.Button?.Data?.Action};");
    }

    private void SearchbarCallback(IonSearchBarInputEventArgs args)
    {
        renderList = filterList(args.Value);
        StateHasChanged();
    }

}

