@page "/samples/alert"

<PlaygroundContainer>
    <Header>
        <h2>Inline Alerts (Recommended)</h2>
        <p><code>ion-alert</code> can be used by writing the component directly in your template. This reduces the number of handlers you need to wire up in order to present the Alert.</p>
    </Header>
    <ChildContent>
        <div class="playground__frame">
            <IonButton id="present-alert">Click Me</IonButton>
            <IonAlert
                Trigger="present-alert"
                Header="A Short Title Is Best"
                SubHeader="A Sub Header Is Optional"
                Message="A message should be a short, complete sentence."
                Buttons="@(() => new [] {
                             new AlertButton() { Text = "Action" },
                         })"
            />
        </div>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h3>Using isOpen</h3>
        <p>The <code>isOpen</code> property on <code>ion-alert</code> allows developers to control the presentation state of the Alert from their application state. This means when <code>isOpen</code> is set to <code>true</code> the Alert will be presented, and when <code>isOpen</code> is set to <code>false</code> the Alert will be dismissed.</p>
        <p><code>isOpen</code> uses a one-way data binding, meaning it will not automatically be set to <code>false</code> when the Alert is dismissed. Developers should listen for the <code>ionAlertDidDismiss</code> or <code>didDismiss</code> event and set <code>isOpen</code> to <code>false</code>. The reason for this is it prevents the internals of <code>ion-alert</code> from being tightly coupled with the state of the application. With a one way data binding, the Alert only needs to concern itself with the boolean value that the reactive variable provides. With a two way data binding, the Alert needs to concern itself with both the boolean value as well as the existence of the reactive variable itself. This can lead to non-deterministic behaviors and make applications harder to debug.</p>
    </Header>
    <ChildContent>
        <UsingIsOpen/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h3>Using Method</h3>
    </Header>
    <ChildContent>
        <UsingMethod/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer>
    <Header>
        <h2>Controller Alerts</h2>
        <p>The <code>alertController</code> can be used in situations where more control is needed over when the Alert is presented and dismissed.</p>
    </Header>
    <ChildContent>
        <ControllerAlerts/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer EnableConsole="true">
    <Header>
        <h2>Buttons</h2>
        <p>In the array of <code>buttons</code>, each button includes properties for its <code>text</code>, and optionally a <code>handler</code>. If a handler returns <code>false</code> then the alert will not automatically be dismissed when the button is clicked. All buttons will show up in the order they have been added to the <code>buttons</code> array from left to right. Note: The right most button (the last one in the array) is the main button.</p>
        <p>Optionally, a <code>role</code> property can be added to a button, such as <code>cancel</code>. If a <code>cancel</code> role is on one of the buttons, then if the alert is dismissed by tapping the backdrop, then it will fire the handler from the button with a cancel role.</p>
    </Header>
    <ChildContent>
        <Buttons/>
    </ChildContent>
</PlaygroundContainer>

<PlaygroundContainer EnableConsole="true">
    <Header>
        <h2>Inputs</h2>
        <h3>Text Inputs Example</h3>
    </Header>
    <ChildContent>
        <TextInputsExample/>
    </ChildContent>
</PlaygroundContainer>

<h3>Radio Example</h3>
<div class="playground__container">
    <div class="playground__preview">
        <div class="playground__frame">
            <RadioExample/>
        </div>
    </div>
</div>

<h3>Checkbox Example</h3>
<div class="playground__container">
    <div class="playground__preview">
        <div class="playground__frame">
            <CheckboxExample/>
        </div>
    </div>
</div>

<h2>Customization</h2>
<div class="playground__container">
    <div class="playground__preview">
        <div class="playground__frame">
            <CustomizationExample/>
        </div>
    </div>
</div>