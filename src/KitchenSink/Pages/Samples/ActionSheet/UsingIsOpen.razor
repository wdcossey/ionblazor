<IonButton @onclick="@(() => _actionSheet.IsOpen = true)">Open</IonButton>
<IonActionSheet TButtonData="ActionSheetButtonData"
                @ref="_actionSheet"
                Header="Actions"
                Buttons="@(() =>
                         {
                             return new List<ActionSheetButton<ActionSheetButtonData>>() {
                                 new () { Text = "Delete", Role = "destructive", Data = new ActionSheetButtonData { Action = "delete" }, Handler = ButtonHandler },
                                 new () { Text = "Share", Handler = ButtonHandler },
                                 new ()
                                 {
                                     Text = "Cancel",
                                     Role = "cancel",
                                     Data = new ActionSheetButtonData { Action = "cancel" },
                                     Handler = ButtonHandler
                                 }
                             };
                         })"
                IonActionSheetDidDismiss="@IonActionSheetDidDismiss"></IonActionSheet>

@code {
    private IonActionSheet<ActionSheetButtonData> _actionSheet = null!;

    private void IonActionSheetDidDismiss(ActionSheetDismissEventArgs<ActionSheetButtonData> args)
    {
        _actionSheet.IsOpen = false;
    }

    private async ValueTask ButtonHandler(ActionSheetButton<ActionSheetButtonData>? button, int? index)
    {
        await IonToastController.PresentAsync(options =>
        {
            options.Message = $"Button Index: {index}; Role: {button?.Role}; Text: {button?.Text}; Action: {button?.Data?.Action};";
            options.Position = "bottom";
            options.Duration = 3000;
            options.Icon = "logo-ionic";
        });
    }

}