@page "/"
@using System.Text.Json.Nodes
@using System.Diagnostics

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<IonMenu ContentId="main-content" >
    <IonHeader>
        <IonToolbar>
            <IonTitle>Menu Content</IonTitle>
        </IonToolbar>
    </IonHeader>
    <IonContent Class="ion-padding">
        <IonList>
            <IonItemGroup>
                        
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Action Sheet </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/action-sheet"))">
                    <IonLabel>ion-action-sheet</IonLabel>
                </IonItem>
                
            </IonItemGroup>
            
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Accordion </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/accordion"))">
                    <IonLabel>ion-accordion</IonLabel>
                </IonItem>
            </IonItemGroup>
            
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Alert </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/alert"))">
                    <IonLabel>ion-alert</IonLabel>
                </IonItem>
            </IonItemGroup>
            
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Badge </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/badge"))">
                    <IonLabel>ion-badge</IonLabel>
                </IonItem>
            </IonItemGroup>
            
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Breadcrumbs </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/breadcrumbs"))">
                    <IonLabel>ion-breadcrumbs</IonLabel>
                </IonItem>
            </IonItemGroup>
        
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Button </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/button"))">
                    <IonLabel>ion-button</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/ripple-effect"))">
                    <IonLabel>ion-ripple-effect</IonLabel>
                </IonItem>
            </IonItemGroup>
        
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Card </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/card"))">
                    <IonLabel>ion-card</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Checkbox </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/checkbox"))">
                    <IonLabel>ion-checkbox</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Chip </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/chip"))">
                    <IonLabel>ion-chip</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Content </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/content"))">
                    <IonLabel>ion-content</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Content </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/content"))">
                    <IonLabel>ion-content</IonLabel>
                </IonItem>
            </IonItemGroup>
        
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Date & Time Pickers </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/date-time"))">
                    <IonLabel>ion-date-time</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/date-time-button"))">
                    <IonLabel>ion-date-time-button</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/picker"))">
                    <IonLabel>ion-picker</IonLabel>
                </IonItem>
            </IonItemGroup>
        
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Floating Action Button </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/fab"))">
                    <IonLabel>ion-fab</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Grid </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/grid"))">
                    <IonLabel>ion-grid</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Infinite Scroll </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/infinite-scroll"))">
                    <IonLabel>ion-infinite-scroll</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Input </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/input"))">
                    <IonLabel>ion-input</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Item </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/item"))">
                    <IonLabel>ion-item</IonLabel>
                </IonItem>

                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/item-divider"))">
                    <IonLabel>ion-item-divider</IonLabel>
                </IonItem>

                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/item-group"))">
                    <IonLabel>ion-item-group</IonLabel>
                </IonItem>

                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/item-sliding"))">
                    <IonLabel>ion-item-sliding</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" Disabled="true" @onclick="@(() => { })">
                    <IonLabel>ion-item-options</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" Disabled="true" @onclick="@(() => { })">
                    <IonLabel>ion-item-option</IonLabel>
                </IonItem>

                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/label"))">
                    <IonLabel>ion-label</IonLabel>
                </IonItem>

                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/note"))">
                    <IonLabel>ion-note</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> List </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/list"))">
                    <IonLabel>ion-list</IonLabel>
                </IonItem>
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/list-header"))">
                    <IonLabel>ion-list-header</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Media </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/avatar"))">
                    <IonLabel>ion-avatar</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/icon"))">
                    <IonLabel>ion-icon</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/image"))">
                    <IonLabel>ion-img</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/thumbnail"))">
                    <IonLabel>ion-thumbnail</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Menu </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/menu"))">
                    <IonLabel>ion-menu</IonLabel>
                </IonItem>
                
            </IonItemGroup>

        <IonItemGroup>
            <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                <IonLabel> Toast </IonLabel>
            </IonItemDivider>
                
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/toast"))">
                <IonLabel>ion-toast</IonLabel>
            </IonItem>
        </IonItemGroup>
        
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Popover </IonLabel>
                </IonItemDivider>
                    
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/popover"))">
                    <IonLabel>ion-popover</IonLabel>
                </IonItem>
            </IonItemGroup>
            
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Select </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/select"))">
                    <IonLabel>ion-select</IonLabel>
                </IonItem>
            </IonItemGroup>
            
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Range </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/range"))">
                    <IonLabel>ion-range</IonLabel>
                </IonItem>
            </IonItemGroup>
            
            <IonItemGroup>
                <IonItemDivider Color="@IonColor.Primary" Sticky="@true">
                    <IonLabel> Progress Indicators </IonLabel>
                </IonItemDivider>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/loading"))">
                    <IonLabel>ion-loading</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/progress-bar"))">
                    <IonLabel>ion-progress-bar</IonLabel>
                </IonItem>
                
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/spinner"))">
                    <IonLabel>ion-spinner</IonLabel>
                </IonItem>
                <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/skeleton-text"))">
                    <IonLabel>ion-skeleton-text</IonLabel>
                </IonItem>
            </IonItemGroup>

            <IonItem Button="true" @onclick="@(() => NavigationManager.NavigateTo("/samples/searchbar"))">
                <IonLabel>ion-searchbar</IonLabel>
            </IonItem>
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/text"))">
                <IonLabel>ion-text</IonLabel>
            </IonItem>
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/toggle"))">
                <IonLabel>ion-toggle</IonLabel>
            </IonItem>
            
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/toolbar"))">
                <IonLabel>ion-toolbar</IonLabel>
            </IonItem>
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/tabs"))">
                <IonLabel>ion-tabs</IonLabel>
            </IonItem>
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/reorder"))">
                <IonLabel>ion-reorder</IonLabel>
            </IonItem>
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/refresher"))">
                <IonLabel>ion-refresher</IonLabel>
            </IonItem>
            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/radio"))">
                <IonLabel>ion-radio</IonLabel>
            </IonItem>
            <IonItem Button="true" @onclick="@(() => NavigationManager.NavigateTo("/samples/segment-button"))">
                <IonLabel>ion-segment-button</IonLabel>
            </IonItem>
        
            
            
            

            <IonItem Button="@true" @onclick="@(() => NavigationManager.NavigateTo("/samples/modal"))">
                <IonLabel>ion-modal</IonLabel>
            </IonItem>
            
                            


        </IonList>
    </IonContent>
</IonMenu>

<div class="ion-page" id="main-content">
    <IonHeader>
        <IonToolbar>
            <IonButtons slot="start">
                <IonMenuButton/>
            </IonButtons>
            <IonTitle>Menu</IonTitle>
        </IonToolbar>
    </IonHeader>
    
    <IonContent Class="container">
        
        <IonFab slot="fixed" Vertical="@IonVerticalAlignment.Top" Horizontal="@IonHorizontalAlignment.Start">
            <IonFabButton>
              <IonIcon Name="chevron-forward-circle"></IonIcon>
            </IonFabButton>
            <IonFabList Side="end">
              <IonFabButton>
                <IonIcon Name="document"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="color-palette"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="globe"></IonIcon>
              </IonFabButton>
            </IonFabList>
          </IonFab>
        
          <IonFab slot="fixed" Vertical="@IonVerticalAlignment.Top" Horizontal="@IonHorizontalAlignment.End" Edge="true">
            <IonFabButton>
              <IonIcon Name="chevron-down-circle"></IonIcon>
            </IonFabButton>
            <IonFabList Side="bottom">
              <IonFabButton>
                <IonIcon Name="document"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="color-palette"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="globe"></IonIcon>
              </IonFabButton>
            </IonFabList>
          </IonFab>
              
          <IonFab slot="fixed" Vertical="@IonVerticalAlignment.Bottom" Horizontal="@IonHorizontalAlignment.End">
            <IonFabButton>
              <IonIcon Name="chevron-up-circle"></IonIcon>
            </IonFabButton>
            <IonFabList Side="top">
              <IonFabButton>
                <IonIcon Name="document"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="color-palette"></IonIcon>
              </IonFabButton>
              <IonFabButton>
                <IonIcon Name="globe"></IonIcon>
              </IonFabButton>
            </IonFabList>
          </IonFab>
        
        <IonList Inset="true">
            <IonItem Button="@true" Detail="@false" id="select-fruits">
                <IonLabel>Favorite Fruits</IonLabel>
                <div slot="end" id="#selected-fruits">@($"{workingSelectedFruits.Count} Items")</div>
            </IonItem>
            <IonButton Expand="ButtonExpand.Block" Color="@IonColor.Danger" @onclick="@(() => presentToast("bottom", "Hello World!"))">Present Toast At the Bottom</IonButton>

        </IonList>

        <ion-toast isOpen=true message="Hello World!" duration=1500></ion-toast>

        <IonList>
            <IonItemSliding IonDrag="@(args => { Debug.WriteLine("IonDrag -- Amount: {0}; Ratio: {1}", args.Amount, args.Ratio); })">
                <IonItem>
                    <IonLabel aria-label="Sliding Item with End Options">Sliding Item with End Options</IonLabel>
                </IonItem>

                <IonItemOptions IonSwipe="@(args => { Debug.WriteLine("IonSwipe -- Side: {0}", new object[] { args.Side }); })">
                    <IonItemOption>Favorite</IonItemOption>
                    <IonItemOption Color="@IonColor.Danger">Delete</IonItemOption>
                </IonItemOptions>
            </IonItemSliding>

            <IonItemSliding>
                <IonItemOptions Side="@IonItemOptionsSide.Start">
                    <IonItemOption Color="@IonColor.Success">Archive</IonItemOption>
                </IonItemOptions>

                <IonItem>
                    <IonLabel>Sliding Item with Start Options</IonLabel>
                </IonItem>
            </IonItemSliding>

            <IonItemSliding>
                <IonItemOptions Side="@IonItemOptionsSide.Start">
                    <IonItemOption Color="@IonColor.Success">Archive</IonItemOption>
                </IonItemOptions>

                <IonItem>
                    <IonLabel>Sliding Item with Options on Both Sides</IonLabel>
                </IonItem>

                <IonItemOptions Side="@IonItemOptionsSide.End">
                    <IonItemOption>Favorite</IonItemOption>
                    <IonItemOption Color="@IonColor.Danger">Delete</IonItemOption>
                </IonItemOptions>
            </IonItemSliding>

            <IonItemSliding>
                <IonItemOptions Side="@IonItemOptionsSide.Start">
                    <IonItemOption Color="@IonColor.Success">Archive</IonItemOption>
                </IonItemOptions>

                <IonItem>
                    <FlowObjectPanel DataSource="@(new { One = "FlowObjectPanel", Two = "Sample" })" Options="@(new ObjectFieldOptionsCollection { new ObjectFieldOptions() { Row = 0, Column = 0, Width = "16px", Height = "16px", Padding = "4px", BackgroundColor = "#ff0000" }, new ObjectFieldOptions() { Row = 0, Column = 1, Template = "{{One}}" }, new ObjectFieldOptions() { Row = 1, Column = 1, Template = "{{Two}}" } })"></FlowObjectPanel>
                </IonItem>

                <IonItemOptions Side="@IonItemOptionsSide.End">
                    <IonItemOption>Favorite</IonItemOption>
                    <IonItemOption Color="@IonColor.Danger">Delete</IonItemOption>
                </IonItemOptions>
            </IonItemSliding>
        </IonList>

        <ion-datetime-button datetime="datetime"></ion-datetime-button>

        <ion-modal>
            <ion-datetime id="datetime"></ion-datetime>
        </ion-modal>

        <ion-button id="open-modal" expand="block">Open</ion-button>
    </IonContent>

    <ion-modal trigger="select-fruits" id="selected-fruits" @ref="@modal">
        <IonHeader>
            <IonToolbar>
                <IonButtons slot="start">
                    <IonButton @onclick="@cancelChanges">Cancel</IonButton>
                </IonButtons>
                <IonTitle>Favorite Fruits</IonTitle>
                <IonButtons slot="end">
                    <IonButton @onclick="@confirmChanges">Done</IonButton>
                </IonButtons>
            </IonToolbar>
            <IonToolbar>
                <IonSearchBar Debounce="1000" Value="@searchbarValue" IonInput="@(SearchbarCallback)"></IonSearchBar>
            </IonToolbar>
        </IonHeader>
        <IonContent Color="@IonColor.Light" Class="ion-padding">
            <IonList id="modal-list" Inset="@true">
                @foreach (var item in renderList)
                {
                    var @checked = workingSelectedFruits.Contains(item.value);
                    <IonItem>
                        <IonLabel>@item.text</IonLabel>
                        <IonCheckbox aria-label="@item.text" slot="end" Value="@item.value" Checked="@(@checked)"></IonCheckbox>
                    </IonItem>
                }
            </IonList>
        </IonContent>
    </ion-modal>

    <IonModal Trigger="open-modal" @ref="@_inputModal">
        <IonHeader>
            <IonToolbar>
                <IonButtons slot="start">
                    <IonButton @onclick="@cancel">Cancel</IonButton>
                </IonButtons>
                <IonTitle>Welcome</IonTitle>
                <IonButtons slot="end">
                    <IonButton @onclick="@confirm" Strong="@true">Confirm</IonButton>
                </IonButtons>
            </IonToolbar>
        </IonHeader>
        <IonContent Class="ion-padding">
            <IonItem>
                <IonLabel Position="@IonLabelPosition.Stacked">Enter your name</IonLabel>
                <IonInput @ref="@inputNameRef"
                          id="input-name"
                          Type="@IonInputType.Text"
                          Placeholder="Your name"
                          IonChange="@(args => inputNameValue = args.Value)"
                          IonInputEvent="@(args => inputNameValue = args.Value)">
                </IonInput>

                @*
await JsRuntime.InvokeVoidAsync("attachIonEventListener", "ionChange", inputNameRef, InputNameObjectReference);
        await JsRuntime.InvokeVoidAsync("attachIonEventListener", "ionInput", inputNameRef, InputNameInputObjectReference);
        
*@
            </IonItem>
        </IonContent>
    </IonModal>

    <IonList>
        <IonItem>
            <IonSelect TValue="@(string)" Label="Default label"  Multiple="@true" Placeholder="Favorite Fruit" IonChange="@(args => 
                                                                                                                                {
                                                                                                                                    Console.WriteLine(args.Value.ToString());
                                                                                                                                    Console.WriteLine(string.Join("|", (args.Sender.Value as string[]) ?? new [] { (string?)args.Sender.Value }));
                                                                                                                                })">
                <IonSelectOption Value="apple">Apple</IonSelectOption>
                <IonSelectOption Value="banana">Banana</IonSelectOption>
                <IonSelectOption Value="orange">Orange</IonSelectOption>
            </IonSelect>
        </IonItem>
    </IonList> 

    <IonButton id="click-trigger">Left-Click Me</IonButton>
    <IonPopover Trigger="click-trigger" TriggerAction="@IonPopoverTriggerAction.Click">
      <IonContent Class="ion-padding">Hello World!</IonContent>
    </IonPopover>

    <IonButton id="open-action-sheet">Open ActionSheet by Trigger</IonButton>
    <IonButton @onclick="@(async () => { await _actionSheet.PresentAsync(); })" >Open ActionSheet by Method</IonButton>

<IonActionSheet
        @ref="_actionSheet"
        TButtonData="ActionSheetButtonData"
        Trigger="open-action-sheet" 
        Header="Actions"
        DidPresent="@DidPresent"
        DidDismiss="@DidDismiss"
        ButtonHandler="@OnButtonHandler"
        Buttons="@(() => { return new List<ActionSheetButton<ActionSheetButtonData>>() { 
                                 new () { Text = "Delete", Role = "destructive", Icon = "trash-outline", Data = new ActionSheetButtonData { Action = "delete" } }, 
                                 new () { Text = "Share", Icon = "share" }, 
                                 new () { Text = "Cancel", Role = "cancel", Data = new ActionSheetButtonData { Action = "cancel" } } }; })"></IonActionSheet>
    
    @*<ion-icon name="chevron-back"></ion-icon>*@
    @*    {
      text: 'Delete',
      role: 'destructive',
      data: {
        action: 'delete'
      }
    },
    {
      text: 'Share',
      data: {
        action: 'share'
      }
    },
    {
      text: 'Cancel',
      role: 'cancel',
      data: {
        action: 'cancel'
      }
    }*@

      
</div>

@code {

    ElementReference list;      //document.querySelector('ion-list#modal-list');
    ElementReference modal;     //document.querySelector('ion-modal');
    IonInput inputNameRef; //ion-input#input-name
    private IonModal _inputModal;
    
    IonActionSheet<ActionSheetButtonData> _actionSheet;
    
    //IJSObjectReference selectedFruitsText;// = document.querySelector('#selected-fruits');
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> ModalReference;
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> ModalDidDismissReference;
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> InputNameObjectReference;
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> InputNameInputObjectReference;
    
    private List<dynamic> cards = new List<dynamic>();
    private string Title;
    private string Content;
    private string? searchbarValue;
    private string? inputNameValue;

    private (string text, string value)[] fruits = new (string text, string value)[]
    { 
        (text: "Apple", value: "apple"),
        (text: "Apricot", value: "apricot") ,
        (text: "Banana", value: "banana") ,
        (text: "Blackberry", value: "blackberry") ,
        (text: "Blueberry", value: "blueberry") ,
        (text: "Cherry", value: "cherry") ,
        (text: "Cranberry", value: "cranberry") ,
        (text: "Grape", value: "grape") ,
        (text: "Grapefruit", value: "grapefruit") ,
        (text: "Guava", value: "guava") ,
        (text: "Jackfruit", value: "jackfruit") ,
        (text: "Lime", value: "lime") ,
        (text: "Mango", value: "mango") ,
        (text: "Nectarine", value: "nectarine") ,
        (text: "Orange", value: "orange") ,
        (text: "Papaya", value: "papaya") ,
        (text: "Passionfruit", value: "passionfruit") ,
        (text: "Peach", value: "peach") ,
        (text: "Pear", value: "pear") ,
        (text: "Plantain", value: "plantain") ,
        (text: "Plum", value: "plum") ,
        (text: "Pineapple", value: "pineapple") ,
        (text: "Pomegranate", value: "pomegranate") ,
        (text: "Raspberry", value: "raspberry") ,
        (text: "Strawberry", value: "strawberry") 
    };

    private List<string> selectedFruits = new List<string>();
    private HashSet<string> workingSelectedFruits = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);

    private (string text, string value)[] renderList { get; set; }

    private (string text, string value)[] filterList(string? searchQuery)
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return fruits;

        var normalizedQuery = searchQuery.ToLowerInvariant();

        return fruits.Where(fruit => fruit.value.Contains(normalizedQuery)).ToArray();
    }

    protected override void OnInitialized()
    {
        renderList = filterList(null);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender)
            return;


    //modal = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal");
    //var searchbar = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-searchbar");

    //document.querySelector('ion-searchbar').addEventListener('ionInput', e => console.log(e.target.value));

    //await searchbar.InvokeVoidAsync("addCustomEventListener", "ionInput", EventCallback.Factory.Create<string>(this, val => { throw new InvalidOperationException(); }));

        ModalReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            //{"checked":true,"value":"apricot"}
            var tagName = args["tagName"]?.GetValue<string>();

            if (tagName?.Equals("ION-CHECKBOX", StringComparison.InvariantCultureIgnoreCase) is not true)
                return Task.CompletedTask;


            var detail = (@checked: args["detail"]?["checked"]?.GetValue<bool>(), @value: args["detail"]?["value"]?.GetValue<string>());

            if (detail.@checked is true)
            {
                workingSelectedFruits.Add(detail.value);
            }
            else
            {
                workingSelectedFruits.Remove(detail.value);
            }

            return Task.CompletedTask;
        }));

        /*InputNameObjectReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            inputNameValue = args?["detail"]?["value"]?.GetValue<string>();
            return Task.CompletedTask;
        }));*/


        /*InputNameInputObjectReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            inputNameValue = args?["detail"]?["value"]?.GetValue<string>();
            return Task.CompletedTask;
        }));*/

        ModalDidDismissReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            searchbarValue = null;
            StateHasChanged();
            return Task.CompletedTask;
        }));

        await JsRuntime.InvokeVoidAsync("addIonEventListener", "ionChange", modal, ModalReference);
        await JsRuntime.InvokeVoidAsync("addIonEventListener", "ionModalDidDismiss", modal, ModalDidDismissReference);
        
        //(ev) => {renderList(ev.target.value); }
        //selectedFruitsText = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "#selected-fruits");

    }

    public class CustomEventHelper<TArgs>
    {
        private readonly Func<TArgs, Task> _callback;

        public CustomEventHelper(Func<TArgs, Task> callback) => _callback = callback;

        [JSInvokable]
        public Task OnCallbackEvent(TArgs args) => _callback(args);
    }

    /**
   * Reset any working changes
   * and dismiss the modal.
   */
    private async void cancelChanges() {
        workingSelectedFruits = selectedFruits.ToHashSet();
        var modal = await JsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal#selected-fruits");
        await modal.InvokeVoidAsync("dismiss", null, "cancel"); //modal.dismiss(undefined, 'cancel');
        StateHasChanged();
    }

    /**
   * Return the selected
   * fruits to the parent page.
   */
    private async void confirmChanges() {
        selectedFruits = workingSelectedFruits.ToList();
        var modal = await JsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal#selected-fruits");
        await modal.InvokeVoidAsync("dismiss", selectedFruits); //modal.dismiss(selectedFruits)
        StateHasChanged();
    }
    
    private async Task cancel()
    {
        await _inputModal.DismissAsync(role: "cancel");
    }
    
    private async Task confirm()
    {
        await _inputModal.DismissAsync(inputNameValue, "confirm");
    }

    private async Task AddCard()
    {
        if (!string.IsNullOrEmpty(Title))
        {
            if (cards.Any(x => x.Title == Title))
            {
                @* If Title already exists, show a message *@
                await JsRuntime.InvokeVoidAsync("showIonAlert");
                return;
            }
            cards.Add(new { Title = Title, Content = Content });
            Title = string.Empty;
            Content = string.Empty;
        }
    }
}
@code {
    private async void presentToast(string position, string message) {
        await JsRuntime.InvokeVoidAsync("presentToast", position, message);
    }
    
    private async Task DidPresent(ActionSheetEventArgs<ActionSheetButtonData> args)
    {
        //await (args.Sender?.DismissAsync(null, "manual") ?? ValueTask.FromResult<bool>(false));
    }
    
    private void DidDismiss(ActionSheetDismissEventArgs<ActionSheetButtonData> args) {
        //presentToast("bottom", $"Role: {args.Role}; Data: {args.Data}");
    }
    
    private void OnButtonHandler(ActionSheetButtonHandlerEventArgs<ActionSheetButtonData> args) {
        presentToast("bottom", $"Button Index: {args.Index}; Role: {args.Button?.Role}; Text: {args.Button?.Text}; Action: {args.Button?.Data?.Action};");
    }

    private void SearchbarCallback(IonSearchBarInputEventArgs args)
    {
        renderList = filterList(args.Value);
        StateHasChanged();
    }
}

