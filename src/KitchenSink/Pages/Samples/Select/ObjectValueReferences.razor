<IonList>
    <IonItem>
        <IonSelectOf TItem="@Food" ItemsSource="@_foods" aria-label="Food" Placeholder="Select food" IonChange="OnIonChange">
            <ItemTemplate>
                <IonSelectOptionOf TValue="@int" Value="@context.Id">@context.Name</IonSelectOptionOf>
            </ItemTemplate>
        </IonSelectOf>
    </IonItem>
</IonList>


@code {
    [CascadingParameter(Name = nameof(Console))]
    private PlaygroundConsole? Console { get; init; }

    private class Food
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Type { get; set; } = null!;
    }

    private readonly List<Food> _foods =
    [
        new() { Id = 1, Name = "Apples", Type = "fruit" },
        new() { Id = 2, Name = "Carrots", Type = "vegetable" },
        new() { Id = 3, Name = "Cupcakes", Type = "dessert" }
    ];

    private void OnIonChange(IonSelectChangeEventArgs<Food> args)
    {
        Console?.Add($"ionChange fired with value: {args.Value}");
    }

}

@*
<script>
  const foods = [
    {
      id: 1,
      name: 'Apples',
      type: 'fruit',
    },
    {
      id: 2,
      name: 'Carrots',
      type: 'vegetable',
    },
    {
      id: 3,
      name: 'Cupcakes',
      type: 'dessert',
    },
  ];

  const compareWithFn = (o1, o2) => {
    return o1 && o2 ? o1.id === o2.id : o1 === o2;
  };

  const selectEl = document.querySelector('ion-select');
  selectEl.compareWith = compareWithFn;

  foods.forEach((option, i) => {
    const selectOption = document.createElement('ion-select-option');
    selectOption.value = option;
    selectOption.textContent = option.name;
    selectEl.appendChild(selectOption);
  });

  const valueLabel = document.querySelector('ion-text');
  selectEl.addEventListener('ionChange', () => {
    console.log('Current value:', JSON.stringify(selectEl.value));
  });
</script>
*@