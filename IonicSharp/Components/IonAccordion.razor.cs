namespace IonicSharp.Components;

public partial class IonAccordion : IonComponent, IIonModeComponent, IIonContentComponent
{
    private ElementReference _self;

    public override ElementReference IonElement => _self;
    
    /// <inheritdoc/>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// If <b>true</b>, the accordion cannot be interacted with.
    /// </summary>
    [Parameter]
    public bool? Disabled { get; set; }

    /// <inheritdoc/>
    [Parameter]
    public string? Mode { get; set; } = IonMode.Default;

    /// <summary>
    /// If <b>true</b>, the accordion cannot be interacted with, but does not alter the opacity.
    /// </summary>
    [Parameter]
    public bool? Readonly { get; set; }

    /// <summary>
    /// The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    /// </summary>
    [Parameter]
    public string? ToggleIcon { get; set; }

    /// <summary>
    /// The slot inside of <see cref="IonItem"/> to place the toggle icon.<br/>
    /// Defaults to <see cref="IonAccordionToggleIconSlot.End"/>.
    /// </summary>
    [Parameter]
    public string? ToggleIconSlot { get; set; }

    /// <summary>
    /// The value of the accordion. Defaults to an autogenerated value.<br/>
    /// Default: <i>ion-accordion-${accordionIds++}</i>
    /// </summary>
    [Parameter]
    public string? Value { get; set; }
}

public static class IonAccordionToggleIconSlot
{
    public const string End = "end";
    public const string Start = "start";
}