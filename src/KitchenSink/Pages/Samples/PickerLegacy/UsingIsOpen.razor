@namespace IonicTest.Pages.Samples.PickerLegacy

<IonButton @onclick="@(() => _picker.IsOpen = true)">Open</IonButton>
<IonPickerLegacy @ref="_picker"
           TColumn="PickerColumn"
           TColumnOption="PickerColumnOption"
           TButton="PickerButton"
           Columns="@WithColumns"
           Buttons="@WithButtons"
           IonPickerDidDismiss="@IonPickerDidDismiss"></IonPickerLegacy>

<p>@((MarkupString)_message)</p>

@code{

    string _message = string.Empty;

    IonPickerLegacy<PickerColumn, PickerColumnOption, PickerButton> _picker = null!;

    private IReadOnlyList<PickerColumn> WithColumns()
    {
        return
        [
            new()
            {
                Name = "languages",
                Options =
                [
                    new() { Text = "JavaScript", Value = "javascript" },
                    new() { Text = "TypeScript", Value = "typescript" },
                    new() { Text = "Rust", Value = "rust" },
                    new() { Text = "C#", Value = "c#" }
                ]
            }
        ];
    }

    private IReadOnlyList<PickerButton> WithButtons()
    {
        return
        [
            new()
            {
                Text = "Cancel",
                Role = "cancel"
            },
            new()
            {
                Text = "Confirm",
                Handler = ConfirmHandler
            }
        ];
    }

    private ValueTask ConfirmHandler(Dictionary<string, PickedColumnOption>? value)
    {
        if (value is null)
            return ValueTask.CompletedTask;

        _message = $"You selected: <b>{value["languages"].Value}</b>";
        StateHasChanged();

        return ValueTask.CompletedTask;
    }

    private void IonPickerDidDismiss(IonPickerLegacyDismissEventArgs<PickerColumn, PickerColumnOption, PickerButton> args)
    {
        args.Sender!.IsOpen = false; //or _picker.IsOpen = false;
    }
}