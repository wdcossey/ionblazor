<IonButton id="open-picker">Open</IonButton>
<IonPickerLegacy TColumn="PickerColumn"
           TColumnOption="PickerColumnOption"
           TButton="PickerButton"
           Columns="@WithColumns"
           Buttons="@WithButtons"
           Trigger="open-picker"></IonPickerLegacy>

<p>@((MarkupString)_message)</p>

@code{
    
    string _message = string.Empty;
    
    private IReadOnlyList<PickerColumn> WithColumns()
    {
        return new PickerColumn[]
        {
            new()
            {
                Name = "languages",
                Options = new PickerColumnOption[]
                {
                    new() { Text = "JavaScript", Value = "javascript" },
                    new() { Text = "TypeScript", Value = "typescript" },
                    new() { Text = "Rust", Value = "rust" },
                    new() { Text = "C#", Value = "c#" },
                }
            }
        };
    }

    private IReadOnlyList<PickerButton> WithButtons()
    {
        return new PickerButton[]
        {
            new()
            {
                Text = "Cancel",
                Role = "cancel",
            },
            new()
            {
                Text = "Confirm",
                Handler = ConfirmHandler
            }
        };
    }

    private ValueTask ConfirmHandler(Dictionary<string, PickedColumnOption>? value)
    {
        if (value is null) 
            return ValueTask.CompletedTask;
        
        _message = $"You selected: <b>{value["languages"].Value}</b>";
        StateHasChanged();

        return ValueTask.CompletedTask;
    }
    

}
