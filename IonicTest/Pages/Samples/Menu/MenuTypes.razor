<IonMenu @ref="_menu" Type="@_menuType" MenuId="menu-types" ContentId="menu-types-content">
  <IonHeader>
    <IonToolbar>
      <IonTitle>Menu Content</IonTitle>
    </IonToolbar>
  </IonHeader>
  <IonContent Class="ion-padding">
    <IonMenuToggle Menu="menu-types">
      <IonButton @onclick="@(async () => await _menu.CloseAsync(true))">Click to close the menu</IonButton>
    </IonMenuToggle>
  </IonContent>
</IonMenu>

<div class="ion-page" id="menu-types-content">
  <IonHeader>
    <IonToolbar>
      <IonTitle>Menu</IonTitle>
    </IonToolbar>
  </IonHeader>
  <IonContent Class="ion-padding">
    <h2>Select an overlay type:</h2>
    <IonRadioGroup Value="overlay" IonChange="@(args => { _menuType = args.Value; })">
      <IonItem>
        <IonRadio Value="overlay">
          <code>overlay</code>
        </IonRadio>
      </IonItem>
      <IonItem>
        <IonRadio Value="reveal">
          <code>reveal</code>
        </IonRadio>
      </IonItem>
      <IonItem>
        <IonRadio Value="push">
          <code>push</code>
        </IonRadio>
      </IonItem>
    </IonRadioGroup>
    <br />
    <IonMenuToggle Menu="menu-types">
      <IonButton @onclick="@(async () => await _menu.OpenAsync(true))">Click to open the menu</IonButton>
    </IonMenuToggle>
  </IonContent>
</div>

@code {
  private IonMenu _menu = null!;
  private string? _menuType = IonMenuType.Overlay;
}