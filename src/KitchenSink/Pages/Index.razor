@page "/"
@using System.Text.Json.Nodes
@using System.Diagnostics

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager


    <IonList Inset="true">
        <IonItem Button="@true" Detail="@false" id="select-fruits">
            <IonLabel>Favorite Fruits</IonLabel>
            <div slot="end" id="#selected-fruits">@($"{workingSelectedFruits.Count} Items")</div>
        </IonItem>
        <IonButton Expand="ButtonExpand.Block" Color="@IonColor.Danger" @onclick="@(() => PresentToast("bottom", "Hello World!"))">Present Toast At the Bottom</IonButton>

    </IonList>

    <IonList>
        <IonItemSliding IonDrag="@(args => { Console.WriteLine("IonDrag -- Amount: {0}; Ratio: {1}", args.Amount, args.Ratio); })">
            <IonItem>
                <IonLabel aria-label="Sliding Item with End Options">Sliding Item with End Options</IonLabel>
            </IonItem>

            <IonItemOptions IonSwipe="@(args => { Console.WriteLine("IonSwipe -- Side: {0}", new object[] { args.Side ?? "<unknown>" }); })">
                <IonItemOption>Favorite</IonItemOption>
                <IonItemOption Color="@IonColor.Danger">Delete</IonItemOption>
            </IonItemOptions>
        </IonItemSliding>

        <IonItemSliding>
            <IonItemOptions Side="@IonItemOptionsSide.Start">
                <IonItemOption Color="@IonColor.Success">Archive</IonItemOption>
            </IonItemOptions>

            <IonItem>
                <IonLabel>Sliding Item with Start Options</IonLabel>
            </IonItem>
        </IonItemSliding>

        <IonItemSliding>
            <IonItemOptions Side="@IonItemOptionsSide.Start">
                <IonItemOption Color="@IonColor.Success">Archive</IonItemOption>
            </IonItemOptions>

            <IonItem>
                <IonLabel>Sliding Item with Options on Both Sides</IonLabel>
            </IonItem>

            <IonItemOptions Side="@IonItemOptionsSide.End">
                <IonItemOption>Favorite</IonItemOption>
                <IonItemOption Color="@IonColor.Danger">Delete</IonItemOption>
            </IonItemOptions>
        </IonItemSliding>

        <IonItemSliding>
            <IonItemOptions Side="@IonItemOptionsSide.Start">
                <IonItemOption Color="@IonColor.Success">Archive</IonItemOption>
            </IonItemOptions>

            <IonItemOptions Side="@IonItemOptionsSide.End">
                <IonItemOption>Favorite</IonItemOption>
                <IonItemOption Color="@IonColor.Danger">Delete</IonItemOption>
            </IonItemOptions>
        </IonItemSliding>
    </IonList>

    <IonDateTimeButton DateTime="datetime"></IonDateTimeButton>

    <IonModal>
        <IonDateTime id="datetime"></IonDateTime>
    </IonModal>

    <IonButton id="open-modal" Expand="block">Open</IonButton>

    <IonModal @ref="_selectFruitsModalRef" Trigger="select-fruits" id="selected-fruits" IonModalDidDismiss="IonModalDidDismiss">
        <IonHeader>
            <IonToolbar>
                <IonButtons slot="start">
                    <IonButton @onclick="@cancelChanges">Cancel</IonButton>
                </IonButtons>
                <IonTitle>Favorite Fruits</IonTitle>
                <IonButtons slot="end">
                    <IonButton @onclick="@confirmChanges">Done</IonButton>
                </IonButtons>
            </IonToolbar>
            <IonToolbar>
                <IonSearchbar Debounce="1000" Value="@_searchbarValue" IonInput="@(SearchbarCallback)"></IonSearchbar>
            </IonToolbar>
        </IonHeader>
        <IonContent Color="@IonColor.Light" Class="ion-padding">
            <IonList id="modal-list" Inset="@false">
                @foreach (var item in renderList)
                {
                    var isChecked = workingSelectedFruits.Contains(item.value);
                    <IonItem>
                        <IonCheckbox aria-label="@item.text" Value="@item.value" Checked="@isChecked" IonChange="IonChange">
                            <IonLabel>@item.text</IonLabel>
                        </IonCheckbox>
                    </IonItem>
                }
            </IonList>
        </IonContent>
    </IonModal>

    <IonModal Trigger="open-modal" @ref="@_inputModalRef">
        <IonHeader>
            <IonToolbar>
                <IonButtons slot="start">
                    <IonButton @onclick="@cancel">Cancel</IonButton>
                </IonButtons>
                <IonTitle>Welcome</IonTitle>
                <IonButtons slot="end">
                    <IonButton @onclick="@confirm" Strong="@true">Confirm</IonButton>
                </IonButtons>
            </IonToolbar>
        </IonHeader>
        <IonContent Class="ion-padding">
            <IonItem>
                <IonLabel Position="@IonLabelPosition.Stacked">Enter your name</IonLabel>
                <IonInput @ref="@_inputNameRef"
                          id="input-name"
                          Type="@IonInputType.Text"
                          Placeholder="Your name"
                          IonChange="@(args => _inputNameValue = args.Value)"
                          IonInputEvent="@(args => _inputNameValue = args.Value)">
                </IonInput>

                @*
await JsRuntime.InvokeVoidAsync("attachIonEventListener", "ionChange", inputNameRef, InputNameObjectReference);
        await JsRuntime.InvokeVoidAsync("attachIonEventListener", "ionInput", inputNameRef, InputNameInputObjectReference);

*@
            </IonItem>
        </IonContent>
    </IonModal>

    <IonList>
        <IonItem>
            <IonSelect TValue="@(string)" Label="Default label"  Multiple="@true" Placeholder="Favorite Fruit" IonChange="@(args =>
                                                                                                                                {
                                                                                                                                    Console.WriteLine(args.Value.ToString());
                                                                                                                                    Console.WriteLine(string.Join("|", (args.Sender.Value as string[]) ?? new [] { (string?)args.Sender.Value }));
                                                                                                                                })">
                <IonSelectOption Value="apple">Apple</IonSelectOption>
                <IonSelectOption Value="banana">Banana</IonSelectOption>
                <IonSelectOption Value="orange">Orange</IonSelectOption>
            </IonSelect>
        </IonItem>
    </IonList>

    <IonButton id="click-trigger">Left-Click Me</IonButton>
    <IonPopover Trigger="click-trigger" TriggerAction="@IonPopoverTriggerAction.Click">
      <IonContent Class="ion-padding">Hello World!</IonContent>
    </IonPopover>

    <IonButton id="open-action-sheet">Open ActionSheet by Trigger</IonButton>
    <IonButton @onclick="@(async () => { await _actionSheet.PresentAsync(); })" >Open ActionSheet by Method</IonButton>

    <IonButton @ref="_buttonRef">Focus Me</IonButton>
    <IonButton @onclick="@(() => { _ = MainApp?.SetFocusAsync(_buttonRef.IonElement); })" >Focus Button</IonButton>

    <IonActionSheet
        @ref="_actionSheet"
        TButtonData="ActionSheetButtonData"
        Trigger="open-action-sheet"
        Header="Actions"
        DidPresent="@DidPresent"
        DidDismiss="@DidDismiss"
        ButtonHandler="@OnButtonHandler"
        Buttons="@(() => { return new List<ActionSheetButton<ActionSheetButtonData>>() {
                                 new () { Text = "Delete", Role = "destructive", Icon = "trash-outline", Data = new ActionSheetButtonData { Action = "delete" } },
                                 new () { Text = "Share", Icon = "share" },
                                 new () { Text = "Cancel", Role = "cancel", Data = new ActionSheetButtonData { Action = "cancel" } } }; })"></IonActionSheet>

    @*<ion-icon name="chevron-back"></ion-icon>*@
    @*    {
      text: 'Delete',
      role: 'destructive',
      data: {
        action: 'delete'
      }
    },
    {
      text: 'Share',
      data: {
        action: 'share'
      }
    },
    {
      text: 'Cancel',
      role: 'cancel',
      data: {
        action: 'cancel'
      }
    }*@


@code {

    [CascadingParameter(Name = "ion-app")] private IonApp? MainApp { get; init; }

    private IonModal _selectFruitsModalRef = null!;     //document.querySelector('ion-modal');
    private IonInput _inputNameRef = null!;             //ion-input#input-name
    private IonInput _focusInputRef = null!;
    private IonButton _buttonRef = null!;
    private IonModal _inputModalRef = null!;

    IonActionSheet<ActionSheetButtonData> _actionSheet;

    //IJSObjectReference selectedFruitsText;// = document.querySelector('#selected-fruits');
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> InputNameObjectReference;
    private DotNetObjectReference<CustomEventHelper<JsonObject?>> InputNameInputObjectReference;

    private readonly List<dynamic> cards = new();
    private string? Title;
    private string? _content;
    private string? _searchbarValue;
    private string? _inputNameValue;

    private (string text, string value)[] fruits = new (string text, string value)[]
    {
        (text: "Apple", value: "apple"),
        (text: "Apricot", value: "apricot") ,
        (text: "Banana", value: "banana") ,
        (text: "Blackberry", value: "blackberry") ,
        (text: "Blueberry", value: "blueberry") ,
        (text: "Cherry", value: "cherry") ,
        (text: "Cranberry", value: "cranberry") ,
        (text: "Grape", value: "grape") ,
        (text: "Grapefruit", value: "grapefruit") ,
        (text: "Guava", value: "guava") ,
        (text: "Jackfruit", value: "jackfruit") ,
        (text: "Lime", value: "lime") ,
        (text: "Mango", value: "mango") ,
        (text: "Nectarine", value: "nectarine") ,
        (text: "Orange", value: "orange") ,
        (text: "Papaya", value: "papaya") ,
        (text: "Passionfruit", value: "passionfruit") ,
        (text: "Peach", value: "peach") ,
        (text: "Pear", value: "pear") ,
        (text: "Plantain", value: "plantain") ,
        (text: "Plum", value: "plum") ,
        (text: "Pineapple", value: "pineapple") ,
        (text: "Pomegranate", value: "pomegranate") ,
        (text: "Raspberry", value: "raspberry") ,
        (text: "Strawberry", value: "strawberry")
    };

    private List<string> selectedFruits = new List<string>();
    private HashSet<string> workingSelectedFruits = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);

    private (string text, string value)[] renderList { get; set; }

    private (string text, string value)[] filterList(string? searchQuery)
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return fruits;

        var normalizedQuery = searchQuery.ToLowerInvariant();

        return fruits.Where(fruit => fruit.value.Contains(normalizedQuery)).ToArray();
    }

    protected override void OnInitialized()
    {
        renderList = filterList(null);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender)
            return;

        //modal = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal");
        //var searchbar = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-searchbar");

        //document.querySelector('ion-searchbar').addEventListener('ionInput', e => console.log(e.target.value));

        //await searchbar.InvokeVoidAsync("addCustomEventListener", "ionInput", EventCallback.Factory.Create<string>(this, val => { throw new InvalidOperationException(); }));

        /*InputNameObjectReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            inputNameValue = args?["detail"]?["value"]?.GetValue<string>();
            return Task.CompletedTask;
        }));*/


        /*InputNameInputObjectReference = DotNetObjectReference.Create(new CustomEventHelper<JsonObject?>(args =>
        {
            inputNameValue = args?["detail"]?["value"]?.GetValue<string>();
            return Task.CompletedTask;
        }));*/

        //(ev) => {renderList(ev.target.value); }
        //selectedFruitsText = await jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "#selected-fruits");

    }

    public class CustomEventHelper<TArgs>
    {
        private readonly Func<TArgs, Task> _callback;

        public CustomEventHelper(Func<TArgs, Task> callback) => _callback = callback;

        [JSInvokable]
        public Task OnCallbackEvent(TArgs args) => _callback(args);
    }

    /**
   * Reset any working changes
   * and dismiss the modal.
   */
    private async void cancelChanges() {
        workingSelectedFruits = selectedFruits.ToHashSet();
        await _selectFruitsModalRef.DismissAsync(role: "cancel");
        //1var modal = await JsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal#selected-fruits");
        //await modal.InvokeVoidAsync("dismiss", null, "cancel"); //modal.dismiss(undefined, 'cancel');
        StateHasChanged();
    }

    /**
   * Return the selected
   * fruits to the parent page.
   */
    private async void confirmChanges() {
        selectedFruits = workingSelectedFruits.ToList();
        //var modal = await JsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", "ion-modal#selected-fruits");
        //await modal.InvokeVoidAsync("dismiss", selectedFruits); //modal.dismiss(selectedFruits)
        await _selectFruitsModalRef.DismissAsync(data: selectedFruits);
        StateHasChanged();
    }

    private async Task cancel()
    {
        await _inputModalRef.DismissAsync(role: "cancel");
    }

    private async Task confirm()
    {
        await _inputModalRef.DismissAsync(_inputNameValue, "confirm");
    }

    private async Task AddCard()
    {
        if (!string.IsNullOrEmpty(Title))
        {
            if (cards.Any(x => x.Title == Title))
            {
                @* If Title already exists, show a message *@
                await JsRuntime.InvokeVoidAsync("showIonAlert");
                return;
            }
            cards.Add(new { Title = Title, Content = _content });
            Title = string.Empty;
            _content = string.Empty;
        }
    }
}
@code {
    private void PresentToast(string position, string message) {
        _ = JsRuntime.InvokeVoidAsync("presentToast", position, message);
    }

    private Task DidPresent(ActionSheetEventArgs<ActionSheetButtonData> args)
    {
        //await (args.Sender?.DismissAsync(null, "manual") ?? ValueTask.FromResult<bool>(false));
        return Task.CompletedTask;
    }

    private void DidDismiss(ActionSheetDismissEventArgs<ActionSheetButtonData> args) {
        //presentToast("bottom", $"Role: {args.Role}; Data: {args.Data}");
    }

    private void OnButtonHandler(ActionSheetButtonHandlerEventArgs<ActionSheetButtonData> args) {
        PresentToast("bottom", $"Button Index: {args.Index}; Role: {args.Button?.Role}; Text: {args.Button?.Text}; Action: {args.Button?.Data?.Action};");
    }

    private void SearchbarCallback(IonSearchbarInputEventArgs args)
    {
        renderList = filterList(args.Value);
        StateHasChanged();
    }

    private void IonModalDidDismiss(IonModalDismissEventArgs args)
    {
        _searchbarValue = null;
        StateHasChanged();
    }

    private void IonChange(IonCheckboxChangeEventArgs args)
    {
    //{"checked":true,"value":"apricot"}
        //var tagName = args["tagName"]?.GetValue<string>();
        //
        //if (tagName?.Equals("ION-CHECKBOX", StringComparison.InvariantCultureIgnoreCase) is not true)
        //    return Task.CompletedTask;
        //
        //
        //var detail = (@checked: args["detail"]?["checked"]?.GetValue<bool>(), @value: args["detail"]?["value"]?.GetValue<string>());

        if (args.Checked is true)
        {
            workingSelectedFruits.Add(args.Value!);
        }
        else
        {
            workingSelectedFruits.Remove(args.Value!);
        }
    }

}