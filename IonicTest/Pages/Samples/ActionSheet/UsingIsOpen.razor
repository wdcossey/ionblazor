@inject IJSRuntime JsRuntime

<IonButton @onclick="@(() => _actionSheet.IsOpen = true)">Open</IonButton>
<IonActionSheet TButtonData="ActionSheetButtonData" 
                @ref="_actionSheet" 
                Header="Actions" 
                Buttons="@(() => 
                         { 
                             return new List<ActionSheetButton<ActionSheetButtonData>>() { 
                                 new () { Text = "Delete", Role = "destructive", Data = new ActionSheetButtonData { Action = "delete" }, Handler = ButtonHandler }, 
                                 new () { Text = "Share", Handler = ButtonHandler }, 
                                 new () 
                                 {
                                     Text = "Cancel", 
                                     Role = "cancel", 
                                     Data = new ActionSheetButtonData { Action = "cancel" },
                                     Handler = ButtonHandler
                                 } 
                             }; 
                         })"
                IonActionSheetDidDismiss="@IonActionSheetDidDismiss"></IonActionSheet>

@code {
    private IonActionSheet<ActionSheetButtonData> _actionSheet = null!;

    private void IonActionSheetDidDismiss(IonActionSheetDidDismissEventArgs<ActionSheetButtonData> args)
    {
        _actionSheet.IsOpen = false;
    }

    private async ValueTask ButtonHandler(string? text, string? role, int? index, ActionSheetButtonData? data)
    {
        await JsRuntime.InvokeVoidAsync("IonicSharp.IonToastController.present", $"Button Index: {index}; Role: {role}; Text: {text}; Action: {data?.Action};", "bottom", 3000, "logo-ionic");
    }

}
