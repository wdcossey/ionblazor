<IonAccordionGroup IonChange="AccordionOnChangeCallback">
    <IonAccordion Value="first">
        <IonItem slot="header" Color="@IonColor.Light">
            <IonLabel>First Accordion</IonLabel>
        </IonItem>
        <div class="ion-padding" slot="content">First Content</div>
    </IonAccordion>
    <IonAccordion Value="second">
        <IonItem slot="header" Color="@IonColor.Light">
            <IonLabel>Second Accordion</IonLabel>
        </IonItem>
        <div class="ion-padding" slot="content">Second Content</div>
    </IonAccordion>
    <IonAccordion Value="third">
        <IonItem slot="header" Color="@IonColor.Light">
            <IonLabel>Third Accordion</IonLabel>
        </IonItem>
        <div class="ion-padding" slot="content">Third Content</div>
    </IonAccordion>
</IonAccordionGroup>

@code {
    [CascadingParameter(Name = nameof(Console))]
    private PlaygroundConsole? Console { get; init; }

    private readonly string[] _values = ["first", "second", "third"];

    private void AccordionOnChangeCallback(IonAccordionGroupIonChangeEventArgs args)
    {
        var collapsedItems = _values.Where(value => args.Value?.Contains(value) is not true);
        var selectedValue = args.Value;

        Console?.Add($"Expanded: {(selectedValue?.Any() is not true ? "None" : string.Join(",", selectedValue))} | Collapsed: {string.Join(",", collapsedItems)}");
    }
}