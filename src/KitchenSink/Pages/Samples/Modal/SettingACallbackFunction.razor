<div class="ion-page">
    <IonHeader>
        <IonToolbar>
            <IonTitle>App</IonTitle>
        </IonToolbar>
    </IonHeader>
    <IonContent class="ion-padding">
        <IonButton id="open-modal-callback" expand="block">Open</IonButton>
        <p>
            *** This demo is hosted in a <b>&lt;ion-app&gt;</b>, the modal will <b>not</b> be bound to this preview pane!
        </p>
        <IonModal @ref="_modal" Trigger="open-modal-callback" CanDismiss="CanDismissCallback">
            <IonHeader>
                <IonToolbar>
                    <IonTitle>Modal</IonTitle>
                    <IonButtons slot="end">
                        <IonButton @onclick="@(DismissAsync)">Close</IonButton>
                    </IonButtons>
                </IonToolbar>
            </IonHeader>
            <IonContent class="ion-padding">
                <p>You will be prompted when closing this modal.</p>
            </IonContent>
        </IonModal>

        <IonActionSheet @ref="_actionSheet" Header="Are you sure?" TButtonData="ActionSheetButtonData"
                        DidDismiss="DidDismissCallback"
                        Buttons="@(() => { return new List<ActionSheetButton<ActionSheetButtonData>>() {
                                     new () { Text = "Yes", Role = "confirm" },
                                     new () { Text = "No", Role = "cancel" } }; })">

        </IonActionSheet>
    </IonContent>
</div>

@code {

    IonModal _modal = null!;
    private IonActionSheet<ActionSheetButtonData> _actionSheet = null!;
    private TaskCompletionSource<bool> _completionSource = null!;

    private async Task DismissAsync() => await _modal.DismissAsync();

    private void DidDismissCallback(ActionSheetDismissEventArgs<ActionSheetButtonData> args)
    {
        _completionSource.SetResult(args.Role == "confirm");
    }

    private async Task CanDismissCallback(IonModalCanDismissEventArgs args)
    {
        _completionSource = new ();

        await _actionSheet.PresentAsync();

        args.CanDismiss = await _completionSource.Task;
    }
}